[{"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/index.tsx":"1","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/App.tsx":"2","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/reportWebVitals.tsx":"3","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/Teacher.tsx":"4","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/Participants.tsx":"5","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/WaitingQueue.tsx":"6","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/ChatRoom.tsx":"7","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/useChat.tsx":"8"},{"size":512,"mtime":1608203953265,"results":"9","hashOfConfig":"10"},{"size":1222,"mtime":1608213990561,"results":"11","hashOfConfig":"10"},{"size":435,"mtime":1608203953265,"results":"12","hashOfConfig":"10"},{"size":1477,"mtime":1608212401550,"results":"13","hashOfConfig":"10"},{"size":1196,"mtime":1608203953261,"results":"14","hashOfConfig":"10"},{"size":6987,"mtime":1608213961428,"results":"15","hashOfConfig":"10"},{"size":1401,"mtime":1608214117582,"results":"16","hashOfConfig":"10"},{"size":1680,"mtime":1608214140021,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"xgw4gs",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/index.tsx",["37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n",["38","39","40","41","42","43","44"],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/App.tsx",[],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/reportWebVitals.tsx",[],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/Teacher.tsx",[],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/Participants.tsx",[],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/WaitingQueue.tsx",["45","46"],"import React, { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './WaitingQueue.style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { AskingTalk } from '../types';\n\nconst ENDPOINT = 'http://localhost:5000';\n\nconst socket = socketIOClient(ENDPOINT, {\n  transports: ['websocket'],\n});\n\nconst userRole = Math.floor(Math.random() * 2) === 0 ? 'student' : 'teacher';\n/// /////////////////////////////////////////////////////////////////\n/// /////////// ATTENTION CODE LAID !!! /////////////////////////////\n/// /////////////////////////////////////////////////////////////////\n\nexport default function WaitingQueue() {\n  const [response, setResponse] = useState<AskingTalk[]>([]);\n  // correspond à l'objet askingTalk qui sera la demande de prise de parole\n  // (avec l'utilisateur, le type d'intervention et la date de demande)\n  const [askingTalk, setAskingTalk] = useState<AskingTalk | null>(null);\n  // pour stocker l'id d'un askingTalk à supprimer\n  const [askingTalkId, setAskingTalkId] = useState<number | null>(null);\n  // correspond à l'utilisateur connecté -- écrit en dur pour le moment\n  const thisUser = {\n    id: Math.floor(Math.random() * 101),\n    alias: 'Youpi',\n    lastName: 'Célafête',\n    firstName: 'Youpi',\n    role: 'student',\n    askTalking: askingTalk,\n  };\n\n  // function dateDiff(/* dateAskingTalk: Date */) {\n  // let date2 = new Date();\n  // let diff = []\n  // let date1 = interval;\n  // Initialisation du retour\n  // let dateTime = date2 - dateAskingTalk;\n  // dateTime = Math.floor(dateTime / 1000);             // Nombre de secondes entre les 2 dates\n  // diff.sec = dateTime % 60;                    // Extraction du nombre de secondes\n  // dateTime = Math.floor((dateTime - diff.sec) / 60);    // Nombre de minutes (partie entière)\n  // diff.min = dateTime % 60;                    // Extraction du nombre de minutes\n  // dateTime = Math.floor((dateTime - diff.min) / 60);    // Nombre d'heures (entières)\n  // diff.hour = dateTime % 24;                   // Extraction du nombre d'heures\n  // let diffToString = diff.forEach((el) => {\n  // })\n  // return diff;\n  // }\n\n  useEffect(() => {\n    socket.on('FromAPI', (listAskTalking: AskingTalk[]) => {\n      if (listAskTalking) {\n        const liste: AskingTalk[] = [];\n        listAskTalking.forEach((asktalking) => {\n          liste.push(asktalking);\n        });\n        setResponse(liste);\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    socket.on('FromAPI', (data: AskingTalk[]) => {\n      if (data) {\n        const waitingQueueFromServer: AskingTalk[] = [];\n        data.map((el) => waitingQueueFromServer.push(el));\n        setResponse(waitingQueueFromServer);\n      }\n    });\n    // A chaque fois qu'on reçoit un asktalking depuis le serveur\n    socket.on('askingtalk from server', (askingTalkArray: AskingTalk[]) => {\n      // console.log(\"Réception d'un nouvel askingTalkArray depuis le serveur ::: \",\n      // askingTalkArray);\n      setResponse(askingTalkArray);\n    });\n    // A chaque fois qu'on supprime un asktalking depuis le serveur\n    socket.on('askingtalk deleted', (askingTalkArray: AskingTalk[]) => {\n      // console.log(\" Suppression d'un askingTalk depuis le serveur -\n      // new asking talk array ::: \", askingTalkArray);\n      setResponse(askingTalkArray);\n    });\n  }, []);\n\n  // déclenché par les changements sur AskingTalk, donc dans les fonctions sendAskTalking\n  // et cancelAskTalking appelées par le bouton\n  useEffect(() => {\n    if (askingTalk) {\n      // console.log(\"ASKING TALK HERE ::: \", askingTalk);\n      socket.emit('askingtalk from client', askingTalk);\n    } else if (askingTalkId) {\n      // console.log(\"ASKTALKING TO CANCEL ::: \", askingTalkId);\n      socket.emit('cancel askingtalk', askingTalkId);\n    }\n  }, [askingTalk]);\n\n  // fonction appelée par le clic sur le bouton quand on n'a pas encore demandé la parole\n  const sendAskTalking = () => {\n    const isQuestion = window.confirm('Cliquez sur \"ok\" pour une question, \"annuler\" pour une information');\n    const choosenInterventionType = isQuestion ? 'question' : 'information';\n\n    // on \"crée\" notre demande de parole (plus tard : gérer le type d'intervention)\n    setAskingTalk({\n      id: Math.floor(Math.random() * 101),\n      user: thisUser,\n      interventionType: choosenInterventionType,\n      askingDate: new Date(),\n    });\n  };\n\n  // fonction appelée par le clic sur le bouton quand on a déjà demandé la parole\n  const cancelAskTalking = () => {\n    const sureToCancel = window.confirm(`Etes-vous sûr(e) de vouloir annuler votre demande d'intervention ?\n      Vous perdrez votre place dans la file d'attente...`);\n    if (sureToCancel) {\n      if (askingTalk !== null) {\n        setAskingTalkId(askingTalk.id);\n      }\n      setAskingTalk(null);\n    }\n  };\n\n  return (\n    <div className=\"waiting-queue\">\n      <h2>{userRole}</h2>\n      {userRole === 'student' && askingTalk === null ? (\n        <div className=\"topContainerQueueOn\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              sendAskTalking();\n            }}\n            className=\"askTalking\"\n            title=\"Demander une intervention\"\n          >\n            Join the queue\n          </button>\n        </div>\n      ) : (\n        userRole === 'student' && (\n          <div className=\"topContainerQueueOff\">\n            <button\n              type=\"button\"\n              onClick={() => {\n                cancelAskTalking();\n              }}\n              className=\"askTalking\"\n              title={\n                // eslint-disable-next-line no-nested-ternary\n                askingTalk\n                  ? askingTalk.interventionType === 'question'\n                    ? 'Annuler la question'\n                    : \"Annuler l'information\"\n                  : ''\n              }\n            >\n              Leave the queue\n            </button>\n          </div>\n        )\n      )}\n      {askingTalk !== null || userRole === 'teacher' ? (\n        <ol className=\"waitingQueueList\">\n          {response.map((askTalking: AskingTalk) => (\n            <div className=\"waitingContainer\" key={askTalking.id}>\n              <FontAwesomeIcon icon={faUser} className=\"waitIcon\" />\n              <div>\n                <p>{askTalking.user.alias}</p>\n                <p>{askTalking.interventionType}</p>\n                {/* <p>\n                  depuis :\n                  {' '}\n                  {setInterval(() => {\n                   dateDiff(new Date(askTalking.askingDate));\n                  }, 1000)}\n                </p> */}\n              </div>\n            </div>\n          ))}\n        </ol>\n      ) : (\n        <p>\n          Il y a actuellement\n          {response.length}\n          {' '}\n          personnes dans la file d&apos;attente\n        </p>\n      )}\n    </div>\n  );\n}\n","/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/ChatRoom.tsx",[],"/home/brian-lag/Wild Alternance/Project Baamm/2020-11-wns-remote1-baamm/client/src/components/useChat.tsx",[],{"ruleId":"47","severity":1,"message":"48","line":17,"column":17,"nodeType":"49","messageId":"50","endLine":17,"endColumn":28},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":105,"column":24,"nodeType":"67","messageId":"50","endLine":105,"endColumn":108},{"ruleId":"65","severity":1,"message":"66","line":119,"column":26,"nodeType":"67","messageId":"50","endLine":120,"endColumn":59},"no-console","Unexpected console statement.","MemberExpression","unexpected","jsx-a11y/accessible-emoji",[],"lines-around-directive",["68"],"no-spaced-func",["69"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected confirm.","CallExpression","padding-line-between-statements","func-call-spacing"]