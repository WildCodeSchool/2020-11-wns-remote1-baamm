[{"/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/index.tsx":"1","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/App.tsx":"2","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/reportWebVitals.tsx":"3","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/Teacher.tsx":"4","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/Participants.tsx":"5","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/WaitingQueue.tsx":"6","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/ChatRoom.tsx":"7","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/useChat.tsx":"8"},{"size":500,"mtime":1608109004501,"results":"9","hashOfConfig":"10"},{"size":1250,"mtime":1608109004497,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608109004501,"results":"12","hashOfConfig":"10"},{"size":1879,"mtime":1608109004497,"results":"13","hashOfConfig":"10"},{"size":1094,"mtime":1608109004497,"results":"14","hashOfConfig":"10"},{"size":6383,"mtime":1608109004497,"results":"15","hashOfConfig":"10"},{"size":1282,"mtime":1608109004497,"results":"16","hashOfConfig":"10"},{"size":1342,"mtime":1608109004497,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"18mphwp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/index.tsx",[],["39","40"],"/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/App.tsx",["41"],"import React, { useState } from \"react\";\n\nimport './App.css';\nimport Teacher from './components/Teacher';\n\n// function App() {\n//   const [loadClient, setLoadClient] = useState(true);\n//   return (\n//     <Teacher />\n//     /* <>\n//     //   {/* LOAD OR UNLOAD THE CLIENT */}\n//     //   <button onClick={() => setLoadClient(prevState => !prevState)}>\n//     //     {loadClient ? 'STOP CLIENT' : 'START CLIENT'}\n//     //   </button>\n//     //   {/* SOCKET IO CLIENT*/}\n//     //   {loadClient ? <ClientComponent /> : null}\n//     // {/* </> */}\n//   );\n// }\n\nfunction App() {\n\n  // const [loadClient, setLoadClient] = useState(true);\n\n  return (\n    <Teacher />\n  );\n}\n\n\nexport default App;\n\n\n/* <Router>\n      <div className=\"App\">\n        <Link to=\"/\">\n          <button>Home</button>\n        </Link>\n        <Link to=\"/teacher\">\n          <button>Interface Professeur</button>\n        </Link>\n        <Link to=\"/student\">\n          <button>Interface Eleve</button>\n        </Link>\n      </div>\n      <Switch>\n        <Route path=\"/teacher\">\n          <Teacher />\n        </Route>\n        <Route path=\"/student\">\n          <Student />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router> */\n\n","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/reportWebVitals.tsx",[],"/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/Teacher.tsx",["42","43"],"import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock, faCommentAlt, faUsers } from '@fortawesome/free-solid-svg-icons'\nimport Participants from './Participants';\nimport WaitingQueue from './WaitingQueue';\nimport ChatRoom from './ChatRoom';\nimport AskTalkingButton from './AskTalkingButton';\nimport './Teacher.style.css';\n\n\nfunction Teacher() {\n  // const [showToolsContain, setShowToolsContain] = useState(true)\n\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"leftColumn\" /*style={showToolsContain ? { flex: 3 } : { flex: 9 }}*/>\n      </div>\n      <div className=\"rightColumn\" >\n        {/*<button onClick={() => setShowToolsContain(!showToolsContain)}>Put</button>*/}\n        {/*<div className={showToolsContain ? \"toolsContainerOpen\" : \"toolsContainerClose\"} /*style={showToolsContain ? { flex: 3 } : { flex: 1 }}>\n        </div>*/}\n\n        <Router>\n          <div className=\"navToolsBar\">\n            <Link to=\"/chat\" className=\"linkTest\">\n              <FontAwesomeIcon icon={faCommentAlt} />\n            </Link>\n            <Link to=\"/waitingqueue\" className=\"linkTest\">\n              <FontAwesomeIcon icon={faClock} />\n            </Link>\n            <Link to=\"/participants\" className=\"linkTest\">\n              <FontAwesomeIcon icon={faUsers} />\n            </Link>\n          </div>\n          <div ></div>\n          <Switch>\n            <Route path=\"/waitingqueue\">\n              <WaitingQueue />\n            </Route>\n            <Route path=\"/chat\">\n              <ChatRoom />\n            </Route>\n            <Route path=\"/participants\">\n              <Participants />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n};\n\nexport default Teacher;\n","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/Participants.tsx",[],"/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/WaitingQueue.tsx",["44","45"],"import React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './WaitingQueue.style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst ENDPOINT = \"http://localhost:5000\";\n\nconst socket = socketIOClient(ENDPOINT, {\n  transports: ['websocket']\n});\n\nconst userRole = Math.floor(Math.random() * 2) === 0 ? 'student' : 'teacher';\n////////////////////////////////////////////////////////////////////\n////////////// ATTENTION CODE LAID !!! /////////////////////////////\n////////////////////////////////////////////////////////////////////\n\n\nexport default function WaitingQueue(props) {\n  const [response, setResponse] = useState([]);\n  // correspond à l'objet askingTalk qui sera la demande de prise de parole (avec l'utilisateur, le type d'intervention et la date de demande)\n  const [askingTalk, setAskingTalk] = useState(null);\n  // pour stocker l'id d'un askingTalk à supprimer\n  const [askingTalkId, setAskingTalkId] = useState(null);\n  // correspond à l'utilisateur connecté -- écrit en dur pour le moment\n  const thisUser =\n  {\n    id: Math.floor(Math.random() * 101),\n    alias: 'Youpi',\n    lastName: 'Célafête',\n    firstName: 'Youpi',\n    role: 'student',\n    askTalking: askingTalk\n  }\n\n  function dateDiff(dateAskingTalk) {\n    let date2 = new Date();\n    let diff = []\n    //let date1 = interval;\n    // Initialisation du retour\n    let dateTime = date2 - dateAskingTalk;\n    dateTime = Math.floor(dateTime / 1000);             // Nombre de secondes entre les 2 dates\n    diff.sec = dateTime % 60;                    // Extraction du nombre de secondes\n\n    dateTime = Math.floor((dateTime - diff.sec) / 60);    // Nombre de minutes (partie entière)\n    diff.min = dateTime % 60;                    // Extraction du nombre de minutes\n\n    dateTime = Math.floor((dateTime - diff.min) / 60);    // Nombre d'heures (entières)\n    diff.hour = dateTime % 24;                   // Extraction du nombre d'heures\n\n    //let diffToString = diff.forEach((el) => {\n\n    //})\n\n    return diff;\n  }\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT, {\n      transports: ['websocket']\n    });\n    socket.on(\"FromAPI\", listAskTalking => {\n      if (listAskTalking) {\n        const liste = [];\n        listAskTalking.forEach(asktalking => {\n          liste.push(asktalking)\n        })\n        setResponse(liste);\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  useEffect(() => {\n    socket.on('FromAPI', data => {\n      if (data) {\n        const waitingQueueFromServer = [];\n        data.map((el) => {\n          waitingQueueFromServer.push(el);\n        });\n        setResponse(waitingQueueFromServer);\n      }\n    });\n    // A chaque fois qu'on reçoit un asktalking depuis le serveur\n    socket.on('askingtalk from server', askingTalkArray => {\n      // console.log(\"Réception d'un nouvel askingTalkArray depuis le serveur ::: \", askingTalkArray);\n      setResponse(askingTalkArray);\n    });\n    // A chaque fois qu'on supprime un asktalking depuis le serveur\n    socket.on('askingtalk deleted', askingTalkArray => {\n      // console.log(\"Suppression d'un askingTalk depuis le serveur - new asking talk array ::: \", askingTalkArray);\n      setResponse(askingTalkArray);\n    });\n  }, []);\n\n  // déclenché par les changements sur AskingTalk, donc dans les fonctions sendAskTalking et cancelAskTalking appelées par le bouton\n  useEffect(() => {\n    if (askingTalk) {\n      // console.log(\"ASKING TALK HERE ::: \", askingTalk);\n      socket.emit('askingtalk from client', askingTalk);\n    } else if (askingTalkId) {\n      // console.log(\"ASKTALKING TO CANCEL ::: \", askingTalkId);\n      socket.emit('cancel askingtalk', askingTalkId);\n    }\n  }, [askingTalk]);\n\n\n  // fonction appelée par le clic sur le bouton quand on n'a pas encore demandé la parole\n  const sendAskTalking = (e) => {\n\n    let choosenInterventionType;\n    let isQuestion = window.confirm(`Cliquez sur \"ok\" pour une question, \"annuler\" pour une information`);\n    choosenInterventionType = isQuestion ? \"question\" : \"information\";\n\n    // on \"crée\" notre demande de parole (plus tard : gérer le type d'intervention)\n    setAskingTalk(\n      {\n        id: Math.floor(Math.random() * 101),\n        user: thisUser,\n        interventionType: choosenInterventionType,\n        askingDate: new Date()\n      }\n    );\n  }\n\n  // fonction appelée par le clic sur le bouton quand on a déjà demandé la parole\n  const cancelAskTalking = (e) => {\n    let sureToCancel = window.confirm(`Etes-vous sûr(e) de vouloir annuler votre demande d'intervention ?\n      Vous perdrez votre place dans la file d'attente...`);\n    if (sureToCancel) {\n      setAskingTalkId(askingTalk.id);\n      setAskingTalk(null);\n    }\n  }\n\n  return (\n    <div className=\"waiting-queue\">\n      <h2>{userRole}</h2>\n      { userRole === 'student' && askingTalk === null ?\n        <div className=\"topContainerQueueOn\">\n          <button onClick={(e) => { sendAskTalking(e) }}\n            className=\"askTalking\"\n            title=\"Demander une intervention\"\n          >\n            Join the queue\n        </button>\n        </div>\n        :\n        userRole === 'student' &&\n        <div className=\"topContainerQueueOff\">\n          <button onClick={(e) => { cancelAskTalking(e) }}\n            className=\"askTalking\"\n            title={askingTalk.interventionType === 'question' ?\n              \"Annuler la question\" : \"Annuler l'information\"}\n          >\n            Leave the queue\n          </button>\n        </div>\n      }\n      { askingTalk !== null || userRole === 'teacher' ?\n        <ol className=\"waitingQueueList\">\n          {response.map((askTalking) => (\n            <div className=\"waitingContainer\" key={askTalking.id}>\n              <FontAwesomeIcon icon={faUser} className=\"waitIcon\" />\n              <div>\n                <p>{askTalking.user.alias}</p>\n                <p>{askTalking.interventionType}</p>\n                <p>depuis : {setInterval(() => {\n                  dateDiff(new Date(askTalking.askingDate))\n                }, 1000)\n                }\n                </p>\n              </div>\n            </div>\n          ))}\n        </ol>\n        :\n        <p>Il y a actuellement {response.length} personnes dans la file d'attente</p>\n      }\n\n    </div>\n  )\n\n\n}\n","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/ChatRoom.tsx",["46"],"import React, { useState, useEffect } from 'react';\nimport useChat from './useChat';\nimport './ChatRoom.style.css';\n\n\nexport default function ChatRoom(props) {\n  const { roomId } = \"Test-Room\"\n  const { messages, sendMessage } = useChat(roomId)\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleNewMessageChange = (e) => {\n    setNewMessage(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\")\n  }\n\n  return (\n    <div className=\"toolsContainer\">\n      <div className=\"messagesContainer\">\n        <ol className=\"messagesList\">\n          {messages.map((message, i) => (\n            <li\n              key={i}\n              className={`message-item ${message.ownedByCurrentUser ? \"my-message\" : \"receive-message\"\n                }`}\n            >\n              {message.body}\n            </li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"inputBlock\">\n        <textarea\n          value={newMessage}\n          onChange={handleNewMessageChange}\n          placeholder=\"Write message ...\"\n          className=\"inputMessage\"\n        />\n        <button\n          onClick={handleSendMessage}\n          className=\"sendMessage\"\n        >\n          Send\n        </button>\n      </div>\n\n    </div>\n  )\n}\n","/home/mayana/projets/wild/projet/2020-11-wns-remote1-baamm/client/src/components/useChat.tsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},{"ruleId":"51","severity":1,"message":"55","line":13,"column":8,"nodeType":"53","messageId":"54","endLine":13,"endColumn":24},{"ruleId":"56","severity":1,"message":"57","line":79,"column":23,"nodeType":"58","messageId":"59","endLine":79,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":106,"column":6,"nodeType":"62","endLine":106,"endColumn":18,"suggestions":"63"},{"ruleId":"51","severity":1,"message":"64","line":1,"column":27,"nodeType":"53","messageId":"54","endLine":1,"endColumn":36},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'AskTalkingButton' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'askingTalkId'. Either include it or remove the dependency array.","ArrayExpression",["67"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [askingTalk, askingTalkId]",{"range":"70","text":"71"},[3799,3811],"[askingTalk, askingTalkId]"]